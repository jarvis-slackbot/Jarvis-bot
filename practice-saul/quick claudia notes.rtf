{\rtf1}

claudia is strait forward in purpose.
General cmds
claudia
    create
    update
    test-lambda
    destroy
    *generate-serverless-express-proxy (this one is unique)
options
    --help
    --version
    -v & -quiet
    --profile (sets aws credentials profile)
IN-Depth
create --
    region, handler (main.router), api-module, name (lambda name), *version (version alias), **source(default: '.'), **config (default: claudia.json), policies (ex: policies/*.xml), role, description, etc.
update are noted by '*' above.
destroy noted by '**' above. (all are also updated)
test-lambda --
    event (filePath with JSON test event), version, source, config
generate-serverless-express-proxy --
    source, 
    express-module: main module that exports express app
        ex: if app defined/exported in express-server.js, enter express-server
    proxy-module-name: 
        [OPTIONAL] new proxy module/file to be made. 
        To make file called web-lambda.js, enter web-lambda
            defaults to: lambda
    aws-serverless-express-module: 
        [OPTIONAL] NPM module name/path of serverless-express module you want to install
           defaults to: aws-serverless-express
POSSIBLE SCRIPTS
claudia create --region us-west-2 --name staticName --config seperateStaticConfig.json --role staticRolePerhapsShared --description infoNotFromPackageJson --api-module botFile










AFTER CREATING BOT BUILDER
    *no full access until token provided (given in config steps)
    If no configuration,
        need to configure for something (FB, slack, etc.)
        then you will have access token



most scripts already written in package.json.
    claudia create + other custom options
        npm run cc File

From General Claudia.json
    name is lambda name
        taken from package.name
    role is a a role with set of permisions lambda takes
        taken from package.name + "-executer"
    module
        file that is pushed to lambda
        
        
        
From Claudia.json, After API-builder 
{
  "lambda": {
    "role": "practice-bot-executor",
    "name": "practice-bot-saul",
    "region": "us-west-2"
  },
  "api": {
    "id": "a85tgnnahh",
    "module": "api-builder"
  }
}



From Claudia.json, After bot-builder
{
  "lambda": {
    "role": "practice-bot-saul-executor",
    "name": "practice-bot-saul",
    "region": "us-west-2"
  },
  "api": {
    "id": "7koyfxnimd",
    "module": "bot-builder",
    "url": "https://7koyfxnimd.execute-api.us-west-2.amazonaws.com/latest",
    "deploy": {
      "facebook": "https://7koyfxnimd.execute-api.us-west-2.amazonaws.com/latest/facebook",
      "slackSlashCommand": "https://7koyfxnimd.execute-api.us-west-2.amazonaws.com/latest/slack/slash-command",
      "telegram": "https://7koyfxnimd.execute-api.us-west-2.amazonaws.com/latest/telegram",
      "skype": "https://7koyfxnimd.execute-api.us-west-2.amazonaws.com/latest/skype",
      "twilio": "https://7koyfxnimd.execute-api.us-west-2.amazonaws.com/latest/twilio",
      "kik": "https://7koyfxnimd.execute-api.us-west-2.amazonaws.com/latest/kik",
      "groupme": "https://7koyfxnimd.execute-api.us-west-2.amazonaws.com/latest/groupme",
      "line": "https://7koyfxnimd.execute-api.us-west-2.amazonaws.com/latest/line",
      "viber": "https://7koyfxnimd.execute-api.us-west-2.amazonaws.com/latest/viber",
      "alexa": "https://7koyfxnimd.execute-api.us-west-2.amazonaws.com/latest/alexa"
    }
  }
}




====DOCUMENTATION

----------- API-BBUILDER -----------

https://claudiajs.com/documentation.html
Covered already:
    cmd line args covered (important ones at least), 
    packing with create, version packing not covered,
new ApiBuilder('AWS_PROXY'); 
api docs covered...
    api.get('/', function (request) {}, {});
        0.setup; .get, .post etc.
        a. request object; ..., req.context, etc.
        1. response codes/contentType
            {
            success: { contentType: 'text/plain' }, 
            error: {code: 403}, 
            headers: {hardcoded},
            apiKeyRequired: true
            authorizationType: 'AWS_IAM'
            invokeWithCredentials: //true, arn:aws:iam... //override exec-ing creds
            }
            contentType covered more in site
Dynamic responses
    return new ApiResponse(body, headers, httpCode)
Cross Origin resource sharing headers
    api.corsOrigin(false)
    api.corsOrigin('https://www.claudiajs.com')
    api.corsHeaders();
    api.corsMaxAge();
Not sure about these:
    Configuring stage variables using post-deployment steps
    Adding generic post-deploy steps
custom authorizors (see docs)
    api.registerAuthorizer(name, options);
Intercept requests
    api.intercept(function (event) { ... });
        notice the format, look up javascript event topic


REQUEST OBJECT
https://tinyurl.com/claudiaDocs-api-md-the-request
    request object is the parameter passed in a get, post, etc. of an api. builder.
      ex: new ApiBuilder().get('/', function(request){})
queryString (usually coded with dir:id)
env (usefull for access keys)<<
body (format to output)
...there's more, and usefull ones, but I don't know too much.

----------- BOT-BUILDER -----------
unlike apibuilder where you pass 0-arg object
    ex: export api (ApiBuilder()); api.get;
you pass 1to2-arg object

```module.exports = 
botBuilder(function (message, originalApiRequest) {
  return `I got ${message.text}`;
}, { platforms: ['facebook', 'twilio'] });```

1st-arg (function)
    1. message
        text: string
            text of message
        type: string
            endpoint receiving `a platform`
        originalRequest: object
            original message in bot format
        sender: string
            sender's id
        postback: boolean
            undefined for new messages, true for replies
    2. originalApiRequest =is= apiBuilder's request object
2nd-arg (object)
    Include, to not slow down from many platforms.
    ex: 
    { platforms: ['facebook', 'twilio'] }
    platform list: 
        facebook, slackSlashCommand, telegram, skype, twilio, kik, groupme, viber, alexa, line

Reply Formats

can complex reply (buttons, attachments etc.) with objects
request.type: bot engine used to send request
    https://github.com/claudiajs/claudia-bot-builder/blob/master/docs/SLACK_MESSAGE_MESSAGE_BUILDER.md
    https://github.com/claudiajs/claudia-bot-builder/blob/master/docs/SLACK_DELAYED_REPLY_BUILDER.md

Synchronous vs A-Synchronous
    Synchronous
        just return
    A-Synchronous
        -return a 'Promise' from callback and resolve later with string/object
        -make sure you configure lambda function to not end early (default: lambda runs 3 secs)
            http://docs.aws.amazon.com/cli/latest/reference/lambda/update-function-configuration.html
Bot Configuration (platform configuration)
    stores access keys/tokens into API Gateway stage vars
    can confuure in `claudia create``claudia update`
    *Suggest to add 2nd-arg platform to speed up


====SLACK MESSAGE BUILDER
https://github.com/claudiajs/claudia-bot-builder/blob/master/docs/SLACK_MESSAGE_MESSAGE_BUILDER.md
    Make complex replies with buttons, attachments, etc.
const slackTemplate = 
    require('claudia-bot-builder').slackTemplate;
More info on slack (limits and guidelines included)
    https://api.slack.com/docs/message-attachments

--- delay/multiple reply ---
https://github.com/claudiajs/claudia-bot-builder/blob/master/docs/SLACK_DELAYED_REPLY_BUILDER.md

























